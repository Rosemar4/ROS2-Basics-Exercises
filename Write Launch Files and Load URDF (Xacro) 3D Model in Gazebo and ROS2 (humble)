Step 1: Create Your ROS2 Package and Folders
First, we need a nice, organized package to hold all our files.

Navigate to the src folder of your ROS2 workspace in the terminal.

Bash
''' python
//cd ~/ws_gazebo/src
Create a new package. Let's call it my_robot_spawner.

Bash

ros2 pkg create --build-type ament_python my_robot_spawner
Now, cd into your new package and create some folders to keep things tidy.

Bash

cd my_robot_spawner
mkdir launch urdf worlds
launch: Will hold our main instruction file.

urdf: Will hold the 3D model files for our robot.

worlds: Will hold the file for our simulation environment.

Step 2: Create Your Robot's 3D Model (The LEGO Pieces)
We'll create two files for our robot. One describes its shape and physics (.xacro), and the other describes its color in Gazebo (.gazebo).

File 1: robot.xacro
This file is the blueprint for your robot. It defines its links (parts) and joints (connections).

Create the file inside the urdf folder:

Bash

touch urdf/robot.xacro
Open urdf/robot.xacro in your code editor and paste this code:

XML

<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="my_robot">

    <!-- This is where we include Gazebo-specific details like color -->
    <xacro:include filename="$(find my_robot_spawner)/urdf/robot.gazebo" />

    <!-- We need a link to connect our robot to the Gazebo world -->
    <link name="world"/>

    <joint name="world_to_base_joint" type="fixed">
        <parent link="world"/>
        <child link="base_link"/>
        <origin xyz="0 0 0.5" rpy="0 0 0"/> <!-- Spawn 0.5m above the ground -->
    </joint>

    <!-- This is the main body of our robot -->
    <link name="base_link">
        <!-- VISUAL: What it looks like -->
        <visual>
            <geometry>
                <cylinder length="0.6" radius="0.2"/>
            </geometry>
        </visual>

        <!-- COLLISION: The shape used for physics crashes -->
        <collision>
            <geometry>
                <cylinder length="0.6" radius="0.2"/>
            </geometry>
        </collision>

        <!-- INERTIAL: The physics properties (mass, etc.). VERY IMPORTANT for Gazebo! -->
        <inertial>
            <mass value="1.0"/>
            <inertia ixx="0.04" ixy="0.0" ixz="0.0" iyy="0.04" iyz="0.0" izz="0.02"/>
        </inertial>
    </link>

</robot>
File 2: robot.gazebo
This file adds extra details that only Gazebo cares about, like making our robot a nice color.

Create the file inside the urdf folder:

Bash

touch urdf/robot.gazebo
Open urdf/robot.gazebo and paste this code:

XML

<?xml version="1.0"?>
<robot>

  <!-- Make our robot's main body blue in Gazebo -->
  <gazebo reference="base_link">
    <material>Gazebo/Blue</material>
  </gazebo>

</robot>
Step 3: Create a Simple World (The Playmat)
We need a simple environment for our robot to live in.

Create a file inside the worlds folder:

Bash

touch worlds/empty.world
Open worlds/empty.world and paste this simple world definition:

XML

<?xml version="1.0" ?>
<sdf version="1.6">
  <world name="default">
    <!-- Add a light source -->
    <include>
      <uri>model://sun</uri>
    </include>
    <!-- Add a ground plane -->
    <include>
      <uri>model://ground_plane</uri>
    </include>
  </world>
</sdf>
Step 4: Write the Launch File (The Instructions)
This is the most important part. The Python launch file tells ROS2 how to start Gazebo and load your robot.

Create a file inside the launch folder. Let's call it spawn_robot.launch.py.

Bash

touch launch/spawn_robot.launch.py
Open launch/spawn_robot.launch.py and paste the following code. Read the comments to understand each step!

Python

import os
from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.actions import IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch_ros.actions import Node
import xacro

def generate_launch_description():

    # === GET FILE PATHS ===
    # Get the path to this package
    pkg_path = get_package_share_directory('my_robot_spawner')
    # Get the path to the robot's URDF file
    xacro_file = os.path.join(pkg_path, 'urdf', 'robot.xacro')
    # Get the path to the world file
    world_file = os.path.join(pkg_path, 'worlds', 'empty.world')

    # === PROCESS THE XACRO FILE ===
    # This converts the XACRO file into a URDF string that Gazebo can understand
    robot_description_config = xacro.process_file(xacro_file)
    robot_description = {'robot_description': robot_description_config.toxml()}

    # === DEFINE THE NODES ===
    # 1. Robot State Publisher Node
    # This node publishes the robot's state (like joint positions) to the /tf topic
    node_robot_state_publisher = Node(
        package='robot_state_publisher',
        executable='robot_state_publisher',
        output='screen',
        parameters=[robot_description]
    )

    # 2. Gazebo Node
    # This starts the Gazebo simulator with our specified world file
    gazebo = IncludeLaunchDescription(
        PythonLaunchDescriptionSource([os.path.join(
            get_package_share_directory('gazebo_ros'), 'launch'), '/gazebo.launch.py']),
        launch_arguments={'world': world_file}.items(),
        )

    # 3. Spawn Entity Node
    # This node takes the robot description and spawns the robot in Gazebo
    spawn_entity = Node(package='gazebo_ros', executable='spawn_entity.py',
                        arguments=['-topic', 'robot_description',
                                   '-entity', 'my_robot'],
                        output='screen')

    # === CREATE THE LAUNCH DESCRIPTION ===
    # This is the final object that ROS2 will execute
    return LaunchDescription([
        gazebo,
        node_robot_state_publisher,
        spawn_entity,
    ])
Step 5: Configure Your Package and Build
This is a step many beginners miss! You have to tell ROS2 about your new files and dependencies.

Edit setup.py: Open the setup.py file in your my_robot_spawner package. We need to tell it to install our launch, urdf, and worlds folders. Replace the data_files section with this:

Python

# Inside your setup.py file
data_files=[
    ('share/ament_index/resource_index/packages',
        ['resource/' + package_name]),
    ('share/' + package_name, ['package.xml']),
    # Add these lines to install your new folders
    (os.path.join('share', package_name, 'launch'), glob('launch/*.launch.py')),
    (os.path.join('share', package_name, 'urdf'), glob('urdf/*')),
    (os.path.join('share', package_name, 'worlds'), glob('worlds/*')),
],
Go back to your workspace root:

Bash

cd ~/ws_gazebo
Build your package:

Bash

colcon build --packages-select my_robot_spawner
Source the workspace: This tells your terminal about your new package.

Bash

source install/setup.bash
Step 6: Launch Everything!
This is the final, exciting step. Run your launch file!

Bash

ros2 launch my_robot_spawner spawn_robot.launch.py
Gazebo should open, load your empty world, and after a few seconds, your blue cylinder robot will appear!

You did it! You've successfully created a robot model and launched it in Gazebo.  
